#!/bin/sh

set -e

mkdir -p /dev
mkdir -p /proc
mkdir -p /sys
mkdir -p /tmp
mount -t sysfs none /sys &>/dev/null || true
mount -t proc none /proc &>/dev/null || true
mount -t devtmpfs none /dev &>/dev/null || true

PATH=$PATH:/sbin:/usr/sbin
export PATH

baseargs="root=/dev/ram rootfstype=ramfs pv_storage.device=LABEL=pvroot pv_storage.fstype=ext4"
dev=`cat /proc/cmdline  | grep pvkroot= | sed -e 's/.* pvkroot=\([^ ]*\).*/\1/' || true`
dev=${DEV:-${dev:-/dev/sda3}}

echo "Finding Storage ..."

for w in 1 2 3 4 5 6 7 8 9 10; do
	DEV=`findfs $dev || true`
	if [ -b "$DEV" ]; then	
		echo "Found storage device $DEV online."
		break
	fi
	echo "Waiting for storage device $dev to come online."
	DEV=
	sleep 1
done

if [ -z "$DEV" ]; then
	echo "Storage device $dev never came online ... exiting in 5 seconds."
	sleep 5
	exit 10
fi

echo "Found storage device $DEV."

mkdir -p /storage
umount $DEV &>/dev/null || true
if ! mount $DEV /storage; then
	echo "Storage device $dev could not be mounted to /storage ... exiting in 5"
	sleep 5
fi

cat /storage/boot/uboot.txt \
	| sed  's/^\(..*\)$/\1\n/' \
	| sed 's/\x0/\n/g' \
	> /tmp/uboot.txt.env

. /tmp/uboot.txt.env

splash() {

cat <<EOF
+++ ----- pvkboot - simply the boot ----- +++
             __   ___.                  __   
_________  _|  | _\\_ |__   ____   _____/  |_ 
\\____ \\  \\/ /  |/ /| __ \\ /  _ \\ /  _ \\   __\\
|  |_> >   /|    < | \_\ (  <_> |  <_> )  |  
|   __/ \\_/ |__|_ \\|___  /\\____/ \\____/|__|  
|__|             \\/    \\/                    

+++ ----------- by Pantacor  ------------ +++
EOF
}


bootit() {
	rev=$1
	try=$2
	cmdline=`cat /proc/cmdline`

	if [ -n "$try" ]; then
		cmdline="$cmdline pv_try=$try"
	fi
	bootrev=$rev
	if [ -e /storage/boot/.pv-trying ]; then
		rm -f /storage/boot/.pv-trying
		echo "Booting revision (rollback): $bootrev (from $try)"
	elif [ -n "$try" ]; then
		bootrev=$try
		touch /storage/boot/.pv-trying
		echo "Booting revision (trying): $try"
	else
		echo "Booting revision (regular): $bootrev"
	fi

	dtcargs=
	if dtc -I fs -O dtb /proc/device-tree > /tmp/devtree.dtb 2>dev/null; then
		dtcargs="--dtb=/tmp/devtree.dtb"
		echo "Booting with device tree copy."
	else
		echo "Booting with no device tree changes."
	fi

	cmdline=`echo $cmdline | sed -e 's/nr_cpus=1//' -e 's:rdinit=[^ ]*::'`
	cmdline="$cmdline pv_rev=$bootrev"
	cmdline="$cmdline $baseargs"
	kernel=/storage/trails/$bootrev/.pv/pv-kernel.img
	initrd=/storage/trails/$bootrev/.pv/pv-initrd.img

	# unset kaslr-seed in case of bogus kernel (XXX: bogus if not enabled)
	# fdtput /tmp/devtree.dtb /chosen kaslr-seed || true

	echo "Loading kernel: $kernel and initrd: $initrd with cmdline: $cmdline."
	kexec -a \
		--initrd=$initrd \
		-l $kernel \
		$dtcargs \
		--command-line="$cmdline"

	umount /storage
	echo "Starting linux..."
	kexec -e
}

splash
bootit $pv_rev $pv_try
